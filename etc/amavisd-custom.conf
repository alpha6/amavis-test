package Amavis::Custom;
use strict;
use warnings;
no warnings qw(uninitialized redefine);

use Data::Dumper;
use List::Util qw/any/;

my $myhostname = ['localhost', '.'];
my $internal_domains = ['pupkin.ru', 'example.com'];

my $external_disclaimer_message = <<'EOM';


====================================
Example internal_disclaimer_message 
For internal hosts

EOM

BEGIN {
  import Amavis::Conf qw(:platform :confvars c cr ca $myhostname);
  import Amavis::Util qw(do_log untaint safe_encode safe_decode);
  import Amavis::rfc2821_2822_Tools;
  import Amavis::Notify qw(build_mime_entity);
}

# MAIL PROCESSING SEQUENCE:
#
# child process initialization
# loop for each mail:
#   receive mail, parse and make available some basic information
#  *custom hook: new() - may inspect info, may load policy banks
#   mail checking and collecting results
#  *custom hook: checks() - called after virus and spam checks but before
#     taking decisions what to do with mail; may inspect or modify results
#   deciding mail fate (lookup on *_lovers, thresholds, ...)
#   quarantining
#   sending notifications (to admin and recip)
#  *custom hook: before_send() - may send other notif., quarantine, modify mail
#   forwarding (unless blocked)
#  *custom hook: after_send() - may suppress DSN, send reports, quarantine
#   sending delivery status notification (if needed)
#   issue main log entry, manage statistics (timing, counters, nanny)
#  *custom hook: mail_done() - may inspect results
# endloop after $max_requests or earlier

# invoked at child process creation time;
# return an object, or just undef when custom checks are not needed
sub new {
  my($class,$conn,$msginfo) = @_;
  my($self) = bless {}, $class;
  return $self;  # returning an object activates further callbacks
}

sub before_send {
  my($self,$conn,$msginfo) = @_;
  # $self    ... whatever was returned by new()
  # $conn    ... object with information about a SMTP connection
  # $msginfo ... object with info. about a mail message being processed

  my($ll) = 0;  # log level (0 is the most important level, 1, 2,... 5 less so)
  do_log($ll,"CUSTOM BS: new message");
  
  eval {
  # examine some data pertaining to the SMTP connection from client
  # See methods in Amavis::In::Connection for the full set of available data.
  #
  # SMTP client's IP address as a string (IPv4 or IPv6)
  my($client_ip) = $msginfo->client_addr;
  my($mail_id) = $msginfo->mail_id; # long-term unique id, e.g. 'yxqmZgS+M09R'
  my($sender)  = $msginfo->sender;  # envelope sender address, e.g. 'usr@e.com'
  my($tempdir) = $msginfo->mail_tempdir;  # working directory for this process
  my($mail_file_name) = $msginfo->mail_text_fn;

  # filename of the original mail, normally $tempdir/email.txt
  do_log($ll,"CUSTOM BS: sender: %s", $sender);
  do_log($ll,"CUSTOM BS: temp.dir: %s", $tempdir);
  do_log($ll,"CUSTOM BS: filename: %s", $mail_file_name);

  # full mail header is available in ->orig_header;
  # some individual header fields are quickly accessible ->orig_header_fields

  # mail body is only stored in file, which may be read if desired
  my($fh) = $msginfo->mail_text;  # file handle of our original mail

  my (undef, $sender_domain) = split /\@/, $sender;
  do_log($ll,"CUSTOM BS: sender_domain: [%s]", $sender_domain);

  do_log($ll, Dumper($internal_domains));
  if (any {$_ eq $sender_domain} @$internal_domains) {
    do_log(0, 'CUSTOM BS: From internal domain, skip ...');
    next;
  } 

  my $io = IO::Handle->new();
  if ($io->fdopen(fileno($fh),"a+")) {
    $io->print($external_disclaimer_message);
  }
  $io->close();

  };
  do_log($ll, "CUSTOM BS: eval error: ".Dumper($@));
  do_log($ll,"CUSTOM BS: done");
};

sub after_send {  # may be left out if not needed
 my($self,$conn,$msginfo) = @_;
 my($fh) = $msginfo->mail_text;  # file handle of our original mail
  my($line); my($line_cnt) = 0;
  $fh->seek(0,0) or die "Can't rewind mail file: $!";
  for ($! = 0; defined($line = $fh->getline); $! = 0) {
    do_log(0, "CUSTOM AS: line [$line]");
  }
  defined $line || $!==0  or die "Error reading mail file: $!";
  do_log(0, "CUSTOM AS: Done");
}

1;  # insure a defined return
